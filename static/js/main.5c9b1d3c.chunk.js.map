{"version":3,"sources":["api/api.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","Loader","className","PostsList","props","selectedUserId","selectPost","selectedPostId","useState","posts","setPosts","isLoading","setIsLoading","useEffect","userId","postsFromServer","length","map","post","title","type","onClick","id","getPostComments","postId","NewCommentForm","onAdd","name","setName","email","setEmail","body","setBody","handleInput","target","value","onSubmit","event","preventDefault","placeholder","onChange","PostDetails","selectedPost","setSelectedPost","comments","setComments","isCommentsHidden","setIsCommentsHidden","commentsFromServer","removeComment","commentId","method","comment","newComment","headers","JSON","stringify","addCommentOnServer","App","users","setUsers","currentUserId","setCurrentUserId","setSelectedPostId","usersFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c9b1d3c.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getAllPosts, getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUserId: number;\n  selectedPostId: number;\n  selectPost: (postId :number) => void;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectPost, selectedPostId } = props;\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectedUserId === 0) {\n      getAllPosts()\n        .then(postsFromServer => {\n          setPosts(postsFromServer);\n          setIsLoading(false);\n        });\n\n      return;\n    }\n\n    getUserPosts(selectedUserId)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n        setIsLoading(false);\n      });\n  }, [selectedUserId]);\n\n  const handleClick = (id: number) => (\n    id === selectedPostId\n      ? selectPost(0)\n      : selectPost(id)\n  );\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts.length === 0 && (\n        <h3>Selected user has not posted anything yet :(</h3>\n      )}\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleClick(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return request('/posts');\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`/posts?userId=${+userId}`);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`/posts/${+postId}`);\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${+postId}`);\n};\n\nexport const deleteCommentFromServer = (commentId: number) => {\n  return request(`/comments/${+commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addCommentOnServer = (newComment: Partial<Comment>) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPostId: number;\n  onAdd: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, onAdd } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleInput = ({ target }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n\n      case 'email':\n        setEmail(target.value);\n        break;\n\n      case 'body':\n        setBody(target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    onAdd(newComment);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  addCommentOnServer,\n  deleteCommentFromServer,\n  getPostComments,\n} from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsHidden, setIsCommentsHidden] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPostDetails(selectedPostId)\n      .then(post => {\n        setSelectedPost(post);\n        setIsLoading(false);\n      });\n    getPostComments(selectedPostId)\n      .then(commentsFromServer => {\n        setComments(commentsFromServer);\n        setIsLoading(false);\n      });\n  }, [selectedPostId]);\n\n  const handleCommentsHide = () => {\n    setIsCommentsHidden(!isCommentsHidden);\n  };\n\n  const removeComment = (id: number) => {\n    deleteCommentFromServer(id)\n      .then(() => getPostComments(selectedPostId))\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  const addComment = (newComment: Partial<Comment>) => {\n    addCommentOnServer(newComment)\n      .then(() => getPostComments(selectedPostId))\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.body}</p>\n      </section>\n\n      {comments.length > 0 && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handleCommentsHide}\n          >\n            {isCommentsHidden\n              ? `Show ${comments.length} ${comments.length === 1 ? 'comment' : 'comments'}`\n              : `Hide ${comments.length} ${comments.length === 1 ? 'comment' : 'comments'}`}\n          </button>\n\n          {!isCommentsHidden && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            onAdd={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentUserId, setCurrentUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setCurrentUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleSelect}\n          >\n            <option value={0}>All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={currentUserId}\n            selectedPostId={selectedPostId}\n            selectPost={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId > 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}